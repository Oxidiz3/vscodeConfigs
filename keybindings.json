// Place your key bindings in this file to override the defaults
[
    //Navigation
    {
        "key": "ctrl-h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl-l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl-k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl-j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "alt+k",
        "command": "cursorMove",
        "when": "editorTextFocus && vim.mode != 'Insert'",
        "args": {
            "to": "up",
            "by": "line",
            "value": 4
        }
    },
    {
        "key": "alt+j",
        "command": "cursorMove",
        "when": "editorTextFocus && vim.mode != 'Insert'",
        "args": {
            "to": "down",
            "by": "line",
            "value": 4
        }
    },
    {
        "command": "workbench.action.nextEditorInGroup",
        "key": "tab",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
    },
    {
        "command": "workbench.action.previousEditorInGroup",
        "key": "shift-tab",
        "when": "vim.mode = 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
    },
    // Coding
    {
        "command": "-acceptSelectedSuggestion",
        "key": "tab",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "selectPrevSuggestion",
        "key": "ctrl+k",
        "when": "suggestWidgetVisible"
    },
    {
        "command": "workbench.action.quickOpenSelectNext",
        "key": "ctrl+j",
        "when": "inQuickOpen"
    },
    // UI
    {
        "command": "workbench.action.toggleAuxiliaryBar",
        "key": "ctrl+shift+,"
    },
    {
        "command": "workbench.action.toggleSidebarVisibility",
        "key": "ctrl+shift+."
    },
    {
        "command": "workbench.action.navigateBack",
        "key": "alt+h",
        "when": "canNavigateBack"
    },
    {
        "command": "workbench.action.navigateForward",
        "key": "alt+l",
        "when": "canNavigateForward"
    },
    {
        "key": "alt+/",
        "command": "-metaGo.gotoSmart"
    },
    {
        "key": "alt+delete",
        "command": "-metaGo.metaJump.deleteToAfter",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+backspace",
        "command": "-metaGo.metaJump.deleteToBefore",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+d",
        "command": "-metaGo.metaJump.deleteToSmart",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+.",
        "command": "-metaGo.gotoAfter"
    },
    {
        "key": "alt+,",
        "command": "-metaGo.gotoBefore"
    },
    {
        "key": "ctrl+alt+.",
        "command": "-metaGo.addCursorAfter"
    },
    {
        "key": "ctrl+alt+,",
        "command": "-metaGo.addCursorBefore"
    },
    {
        "key": "ctrl+alt+/",
        "command": "-metaGo.addCursorSmart"
    },
    {
        "key": "shift+alt+.",
        "command": "-metaGo.selectAfter",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+,",
        "command": "-metaGo.selectBefore",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+/",
        "command": "-metaGo.selectSmart",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+h",
        "command": "-whichkey.searchBindings",
        "when": "whichkeyVisible"
    },
    {
        "key": "space",
        "command": "whichkey.show",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "l",
        "command": "-list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "l",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "right",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+f",
        "command": "-vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.f && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-editor.action.insertSnippet",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+p",
        "command": "-extension.vim_ctrl+p",
        "when": "editorTextFocus && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "backspace",
        "command": "whichkey.undoKey",
        "when": "whichkeyVisible"
    },
    {
        "key": "u",
        "command": "undo",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "ctrl+r",
        "command": "redo",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
    },
]